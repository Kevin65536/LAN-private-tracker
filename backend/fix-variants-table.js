require('dotenv').config();
const { sequelize } = require('./models');

async function fixInfoHashVariantsTable() {
  try {
    console.log('üîß ‰øÆÂ§ç info_hash_variants Ë°®ÁªìÊûÑ...');
    
    // È¶ñÂÖà‰∏∫Áé∞ÊúâËÆ∞ÂΩïÊ∑ªÂä†ÈªòËÆ§ÁöÑÊó∂Èó¥Êà≥
    await sequelize.query(`
      UPDATE info_hash_variants 
      SET created_at = CURRENT_TIMESTAMP 
      WHERE created_at IS NULL;
    `);
    
    // Ê£ÄÊü•ÊòØÂê¶Â≠òÂú® updated_at Âàó
    const columns = await sequelize.query(`
      SELECT column_name 
      FROM information_schema.columns 
      WHERE table_name = 'info_hash_variants' 
      AND column_name = 'updated_at';
    `, { type: sequelize.QueryTypes.SELECT });
    
    if (columns.length === 0) {
      // Ê∑ªÂä† updated_at ÂàóÔºåÂÖÅËÆ∏ NULL ÂÄº
      await sequelize.query(`
        ALTER TABLE info_hash_variants 
        ADD COLUMN updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP;
      `);
      
      // ‰∏∫Áé∞ÊúâËÆ∞ÂΩïËÆæÁΩÆ updated_at
      await sequelize.query(`
        UPDATE info_hash_variants 
        SET updated_at = created_at 
        WHERE updated_at IS NULL;
      `);
      
      // Áé∞Âú®Â∞ÜÂàóËÆæÁΩÆ‰∏∫ NOT NULL
      await sequelize.query(`
        ALTER TABLE info_hash_variants 
        ALTER COLUMN updated_at SET NOT NULL;
      `);
    } else {
      // Â¶ÇÊûúÂàóÂ∑≤Â≠òÂú®‰ΩÜÊúâ NULL ÂÄºÔºåÊõ¥Êñ∞ÂÆÉ‰ª¨
      await sequelize.query(`
        UPDATE info_hash_variants 
        SET updated_at = COALESCE(updated_at, created_at, CURRENT_TIMESTAMP);
      `);
    }
    
    console.log('‚úÖ info_hash_variants Ë°®ÁªìÊûÑ‰øÆÂ§çÂÆåÊàê');
    
    // È™åËØÅË°®ÁªìÊûÑ
    const tableInfo = await sequelize.query(`
      SELECT column_name, data_type, is_nullable, column_default
      FROM information_schema.columns 
      WHERE table_name = 'info_hash_variants'
      ORDER BY ordinal_position;
    `, { type: sequelize.QueryTypes.SELECT });
    
    console.log('üìã ÂΩìÂâçË°®ÁªìÊûÑ:');
    tableInfo.forEach(col => {
      console.log(`   ${col.column_name}: ${col.data_type} ${col.is_nullable === 'NO' ? 'NOT NULL' : 'NULL'} ${col.column_default ? `DEFAULT ${col.column_default}` : ''}`);
    });
    
    process.exit(0);
  } catch (error) {
    console.error('‚ùå ‰øÆÂ§çÂ§±Ë¥•:', error.message);
    console.error('SQL:', error.sql);
    process.exit(1);
  }
}

fixInfoHashVariantsTable();
